package com.shopfloor.backend.database.objects;

import jakarta.persistence.*;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Entity representing equipment in the database.
 * Contains details about the equipment, including its number, name, type, description, creator, timestamps, and associated orders.
 * @author David Todorov (https://github.com/david-todorov)
 */
@Entity
@Table(name = "equipment")
@Setter
@Getter
public class EquipmentDBO {

    /**
     * Unique identifier for the equipment.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Setter(AccessLevel.NONE)
    @Column(name = "id")
    private Long id;

    /**
     * Unique number assigned to the equipment.
     * Cannot be null and must be unique.
     */
    @Column(name = "equipment_number", nullable = false, unique = true, length = 255)
    private String equipmentNumber;

    /**
     * Name of the equipment.
     * Cannot be null.
     */
    @Column(name = "name", nullable = false, length = 255)
    private String name;

    /**
     * Type of the equipment.
     * Cannot be null.
     */
    @Column(name = "type", nullable = false, length = 255)
    private String type;

    /**
     * Description of the equipment.
     * Stored as a text column in the database.
     */
    @Column(name = "description", columnDefinition = "TEXT")
    private String description;

    /**
     * ID of the user who created the equipment record.
     */
    @Column(name = "created_by")
    private Long createdBy;

    /**
     * ID of the user who last updated the equipment record.
     */
    @Column(name = "updated_by")
    private Long updatedBy;

    /**
     * Timestamp when the equipment record was created.
     * Cannot be null and is not updatable.
     */
    @Column(name = "created_at", nullable = false, updatable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdAt;

    /**
     * Timestamp when the equipment record was last updated.
     */
    @Column(name = "updated_at")
    @Temporal(TemporalType.TIMESTAMP)
    private Date updatedAt;

    /**
     * List of orders associated with the equipment.
     * Cascade type is set to PERSIST and MERGE, meaning these operations are cascaded to the orders.
     * Fetch type is set to LAZY, meaning the orders are loaded on demand.
     */
    @ManyToMany(mappedBy = "equipment", cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch = FetchType.LAZY)
    private List<OrderDBO> orders;

    /**
     * Constructs an EquipmentDBO with an empty list of orders.
     */
    public EquipmentDBO() {
        this.orders = new ArrayList<OrderDBO>();
    }

    /**
     * Clears references to this equipment in associated orders.
     */
    public void clearOrderReferences() {
        // Clear associations in orders
        for (OrderDBO order : new ArrayList<>(orders)) {
            order.removeEquipment(this);
        }
    }
}
