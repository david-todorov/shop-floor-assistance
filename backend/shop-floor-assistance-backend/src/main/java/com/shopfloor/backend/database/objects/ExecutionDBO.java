package com.shopfloor.backend.database.objects;

import jakarta.persistence.*;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;

import java.util.Date;

/**
 * Entity representing an execution in the database.
 * Contains details about the execution, including its start and finish times, status, and associated order.
 * @author David Todorov (https://github.com/david-todorov)
 */
@Entity
@Table(name = "executions")
@Setter
@Getter
public class ExecutionDBO {

    /**
     * Unique identifier for the execution.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Setter(AccessLevel.NONE)
    @Column(name = "id")
    private Long id;

    /**
     * Timestamp when the execution started.
     */
    @Column(name = "started_at")
    @Temporal(TemporalType.TIMESTAMP)
    private Date startedAt;

    /**
     * Timestamp when the execution finished.
     */
    @Column(name = "finished_at")
    @Temporal(TemporalType.TIMESTAMP)
    private Date finishedAt;

    /**
     * Indicates whether the execution was aborted.
     */
    @Column(name = "aborted")
    private Boolean aborted;

    /**
     * ID of the user who started the execution.
     */
    @Column(name = "started_by")
    private Long startedBy;

    /**
     * ID of the user who finished the execution.
     */
    @Column(name = "finished_by")
    private Long finishedBy;

    /**
     * The order associated with the execution.
     * Fetch type is set to LAZY, meaning the order is loaded on demand.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "order_id")
    private OrderDBO order;

    /**
     * Constructs an ExecutionDBO with the aborted status set to false.
     */
    public ExecutionDBO() {
        this.aborted = false;
    }
}
