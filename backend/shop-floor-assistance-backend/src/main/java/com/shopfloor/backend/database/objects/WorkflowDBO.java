package com.shopfloor.backend.database.objects;

import jakarta.persistence.*;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Entity representing a workflow in the database.
 * Contains details about the workflow, including its name, description, creator, timestamps, associated tasks, and ordering index.
 * @author David Todorov (https://github.com/david-todorov)
 */
@Entity
@Table(name = "workflows")
@Setter
@Getter
public class WorkflowDBO {

    /**
     * Unique identifier for the workflow.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Setter(AccessLevel.NONE)
    @Column(name = "id")
    private Long id;

    /**
     * Name of the workflow.
     * Cannot be null.
     */
    @Column(name = "name", nullable = false, length = 255)
    private String name;

    /**
     * Description of the workflow.
     * Stored as a text column in the database.
     */
    @Column(name = "description", columnDefinition = "TEXT")
    private String description;

    /**
     * ID of the user who created the workflow.
     */
    @Column(name = "created_by", nullable = false)
    private Long createdBy;

    /**
     * ID of the user who last updated the workflow.
     */
    @Column(name = "updated_by")
    private Long updatedBy;

    /**
     * Timestamp when the workflow was created.
     * Cannot be null and is not updatable.
     */
    @Column(name = "created_at", nullable = false, updatable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdAt;

    /**
     * Timestamp when the workflow was last updated.
     */
    @Column(name = "updated_at")
    @Temporal(TemporalType.TIMESTAMP)
    private Date updatedAt;

    /**
     * List of tasks associated with the workflow.
     * The tasks are ordered by their ordering index in ascending order.
     * Cascade type is set to ALL, meaning all operations (persist, merge, remove, refresh, detach) are cascaded to the tasks.
     * Fetch type is set to LAZY, meaning the tasks are loaded on demand.
     * Note: Deleting all tasks from the list will not delete the workflow entity. The lifecycle of the workflow entity is independent of the tasks.
     */
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)
    @JoinColumn(name = "workflow_id")
    @OrderBy("orderingIndex ASC")
    private List<TaskDBO> tasks;

    /**
     * The ordering index of the workflow.
     * Used to determine the order of workflows.
     */
    @Column(name = "ordering_index")
    private Integer orderingIndex;

    /**
     * Constructs a WorkflowDBO with an empty list of tasks.
     */
    public WorkflowDBO() {
        this.tasks = new ArrayList<TaskDBO>();
    }
}
