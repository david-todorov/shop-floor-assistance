package com.shopfloor.backend.database.objects;

import jakarta.persistence.*;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Entity representing a task in the database.
 * Contains details about the task, including its name, description, creator, timestamps, associated items, and ordering index.
 * @author David Todorov (https://github.com/david-todorov)
 */
@Entity
@Table(name = "tasks")
@Setter
@Getter
public class TaskDBO {

    /**
     * Unique identifier for the task.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Setter(AccessLevel.NONE)
    @Column(name = "id")
    private Long id;

    /**
     * Name of the task.
     * Cannot be null.
     */
    @Column(name = "name", nullable = false, length = 255)
    private String name;

    /**
     * Description of the task.
     * Stored as a text column in the database.
     */
    @Column(name = "description", columnDefinition = "TEXT")
    private String description;

    /**
     * ID of the user who created the task.
     */
    @Column(name = "created_by")
    private Long createdBy;

    /**
     * ID of the user who last updated the task.
     */
    @Column(name = "updated_by")
    private Long updatedBy;

    /**
     * Timestamp when the task was created.
     * Cannot be null and is not updatable.
     */
    @Column(name = "created_at", nullable = false, updatable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdAt;

    /**
     * Timestamp when the task was last updated.
     */
    @Column(name = "updated_at")
    @Temporal(TemporalType.TIMESTAMP)
    private Date updatedAt;

    /**
     * List of items associated with the task.
     * The items are ordered by their ordering index in ascending order.
     * Cascade type is set to ALL, meaning all operations (persist, merge, remove, refresh, detach) are cascaded to the items.
     * Fetch type is set to LAZY, meaning the items are loaded on demand.
     * Note: Deleting all items from the list will not delete the task entity. The lifecycle of the task entity is independent of the items.
     */
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)
    @JoinColumn(name = "task_id")
    @OrderBy("orderingIndex ASC")
    private List<ItemDBO> items;

    /**
     * The ordering index of the task.
     * Used to determine the order of tasks.
     */
    @Column(name = "ordering_index")
    private Integer orderingIndex;

    /**
     * Constructs a TaskDBO with an empty list of items.
     */
    public TaskDBO() {
        this.items = new ArrayList<ItemDBO>();
    }
}
